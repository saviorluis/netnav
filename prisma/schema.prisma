// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  preferences   UserPreference?
  savedEvents   SavedEvent[]
  rsvpEvents    RSVPEvent[]
}

model UserPreference {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  industries      String[]  // Array of industry preferences
  eventTypes      String[]  // Array of preferred event types
  maxDistance     Int       @default(50) // Maximum distance in miles
  zipCode         String?   // Preferred location
  professionalLevel String  // ENTRY, MID, SENIOR, EXECUTIVE
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Event {
  id              String    @id @default(cuid())
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  isRecurring     Boolean   @default(false)
  recurrenceRule  String?   // iCal RRule format
  venueId         String?
  venue           Venue?    @relation(fields: [venueId], references: [id])
  sourceUrl       String    // Original calendar URL
  sourceId        String    // ID from original source
  industries      String[]  // Categorized industries
  eventType       String    // NETWORKING, WORKSHOP, CONFERENCE, etc.
  organizerId     String?
  organizer       Organizer? @relation(fields: [organizerId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  savedBy         SavedEvent[]
  rsvps           RSVPEvent[]

  @@unique([sourceUrl, sourceId])
}

model Venue {
  id          String    @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  latitude    Float
  longitude   Float
  events      Event[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Organizer {
  id          String    @id @default(cuid())
  name        String
  website     String?
  description String?
  events      Event[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SavedEvent {
  id        String    @id @default(cuid())
  userId    String
  eventId   String
  user      User      @relation(fields: [userId], references: [id])
  event     Event     @relation(fields: [eventId], references: [id])
  createdAt DateTime  @default(now())

  @@unique([userId, eventId])
}

model RSVPEvent {
  id        String    @id @default(cuid())
  userId    String
  eventId   String
  status    String    // GOING, MAYBE, NOT_GOING
  user      User      @relation(fields: [userId], references: [id])
  event     Event     @relation(fields: [eventId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, eventId])
}

model EventSource {
  id          String    @id @default(cuid())
  url         String    @unique
  name        String
  type        String    // CHAMBER_OF_COMMERCE, BNI, TOASTMASTERS, etc.
  scrapeConfig Json     // Configuration for the scraper
  lastScraped  DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 